Create a template class called Calculator that can perform basic arithmetic operations on two operands of any data type. The class should have the following public methods:

T add(T num1, T num2): a method that returns the sum of num1 and num2.
T subtract(T num1, T num2): a method that returns the difference between num1 and num2.
T multiply(T num1, T num2): a method that returns the product of num1 and num2.
T divide(T num1, T num2): a method that returns the quotient of num1 and num2.
T modulus(T num1, T num2): a method that returns the remainder of num1 divided by num2. The Calculator class should also have an exception handling mechanism that can detect and handle any attempts to divide by zero. If an attempt is made to divide by zero, the class should throw an exception with an appropriate error message.
Once you have defined the Calculator class, create an instance of the class and perform the following operations on it:

Calculate the sum, difference, product, quotient, and remainder of two integers (e.g. 10 and 5).
Calculate the sum, difference, product, quotient, and remainder of two doubles (e.g. 3.14 and 2.71).
Attempt to divide by zero and handle the resulting exception.
Note: You may use any C++ standard library functions as needed

----------------------------------------------------------------------------------------------------------------------


#include <iostream>
#include <stdexcept>
#include <type_traits>
template <typename T>
class Calculator {
public:
    T add(T num1, T num2) {
        return num1 + num2;
    }

    T subtract(T num1, T num2) {
        return num1 - num2;
    }

    T multiply(T num1, T num2) {
        return num1 * num2;
    }

    T divide(T num1, T num2) {
        if (num2 == 0) {
            throw std::runtime_error("Division by zero is not allowed.");
        }
        return num1 / num2;
    }

    T modulus(T num1, T num2) {
        static_assert(std::is_integral<T>::value, "Modulus operation is only supported for integer types.");
        if (num2 == 0) {
            throw std::runtime_error("Division by zero is not allowed.");
        }
        return num1 % num2;
    }
};

int main() {
    Calculator<int> intCalculator;
    Calculator<double> doubleCalculator;

    // Integer calculations
    int num1 = 10;
    int num2 = 5;
    std::cout << "Integers:" << std::endl;
    std::cout << "Sum: " << intCalculator.add(num1, num2) << std::endl;
    std::cout << "Difference: " << intCalculator.subtract(num1, num2) << std::endl;
    std::cout << "Product: " << intCalculator.multiply(num1, num2) << std::endl;
    std::cout << "Quotient: " << intCalculator.divide(num1, num2) << std::endl;
    std::cout << "Remainder: " << intCalculator.modulus(num1, num2) << std::endl;

    // Double calculations
    double num3 = 3.14;
    double num4 = 2.71;
    std::cout << "\nDoubles:" << std::endl;
    std::cout << "Sum: " << doubleCalculator.add(num3, num4) << std::endl;
    std::cout << "Difference: " << doubleCalculator.subtract(num3, num4) << std::endl;
    std::cout << "Product: " << doubleCalculator.multiply(num3, num4) << std::endl;
    std::cout << "Quotient: " << doubleCalculator.divide(num3, num4) << std::endl;

    // Attempt to divide by zero
    try {
        int num5 = 5;
        int num6 = 0;
        intCalculator.divide(num5, num6); // This will throw an exception
    } catch (const std::runtime_error& e) {
        std::cerr << "Exception: " << e.what() << std::endl;
    }

    return 0;
}
